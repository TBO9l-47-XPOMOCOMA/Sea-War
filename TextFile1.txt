int count = 9;
                for (int row = 1; row < 11; row++)
                    for (int col = 1; col < 11; col++)
                    {
                        if (enemyMap[row, col] == 2)
                        {
                            enemyMap[row, col] = 0;
                            (Controls["eButton" + row + col] as Button).BackColor = Color.FromArgb(213, 223, 242);
                        }
                    }
                for (int deck = 3; deck > 0; deck--)
                {
                    for (int quantity = 1; quantity <= 5 - deck; quantity++)
                    {
                        int i = RandCoords(random);
                        int j = RandCoords(random);
                        int loc = random.Next(0, 2); // 0 - vertical; 1 - horizontal
                        if (loc == 0)
                        {
                            if (i + deck < 11)
                            {
                                bool flag = true;
                                for (int iCell = i; iCell < i + deck; iCell++)
                                {
                                    for (int iCords = iCell - 1; iCords <= iCell + 1; iCords++)
                                    {
                                        for (int jCords = j - 1; jCords <= j + 1; jCords++)
                                        {
                                            if (enemyMap[iCords, jCords] == 1 || enemyMap[iCords, jCords] == 2)
                                            {
                                                flag = false;
                                                quantity--;
                                                continue;
                                            }
                                        }
                                    }
                                }
                                if (flag)
                                {
                                    count--;
                                    for (int iter = 0; iter < deck; iter++)
                                    {
                                        int line = iter + i;
                                        enemyMap[line, j] = 2;
                                        (Controls["eButton" + line + j] as Button).BackColor = Color.FromArgb(149, 104, 222);
                                    }
                                }
                            }
                        }
                        else if (loc == 1)
                        {
                            if (j + deck < 11)
                            {
                                bool flag = true;
                                for (int jCell = j; jCell < j + deck; jCell++)
                                {
                                    for (int iCords = i - 1; iCords <= i + 1; iCords++)
                                    {
                                        for (int jCords = jCell - 1; jCords <= jCell + 1; jCords++)
                                        {
                                            if (enemyMap[iCords, jCords] == 1 || enemyMap[iCords, jCords] == 2)
                                            {
                                                flag = false;
                                                quantity--;
                                                break;
                                            }
                                        }
                                    }
                                }
                                if (flag)
                                {
                                    count--;
                                    for (int iter = 0; iter < deck; iter++)
                                    {
                                        int line = iter + j;
                                        enemyMap[i, line] = 2;
                                        (Controls["eButton" + i + line] as Button).BackColor = Color.FromArgb(149, 104, 222);
                                    }
                                }
                            }
                        }
                    
                    }
                }            